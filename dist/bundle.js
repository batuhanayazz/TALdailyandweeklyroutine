/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ (() => {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\r\n  fetchTasks();\r\n\r\n  const dailyTasksContainer = document.getElementById(\"daily-tasks\");\r\n  const weeklyTasksContainer = document.getElementById(\"weekly-tasks\");\r\n  const currentTimeElement = document.getElementById(\"current-time\");\r\n\r\n  // Fetch tasks from data.json and populate lists\r\n  async function fetchTasks() {\r\n    try {\r\n      const response = await fetch(\"data.json\"); // Update to your 'data.json' file path\r\n      const data = await response.json();\r\n      populateTasks(data.daily, dailyTasksContainer, \"daily\");\r\n      populateTasks(data.weekly, weeklyTasksContainer, \"weekly\");\r\n\r\n      // Set up daily and weekly resets\r\n      resetDailyTasks(\r\n        dailyTasksContainer.querySelectorAll('input[type=\"checkbox\"]')\r\n      );\r\n      resetWeeklyTasks(\r\n        weeklyTasksContainer.querySelectorAll('input[type=\"checkbox\"]')\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    }\r\n  }\r\n\r\n  // Populate tasks into the specified container\r\n  function populateTasks(tasks, container, type) {\r\n    tasks.forEach((task, index) => {\r\n      const listItem = document.createElement(\"li\");\r\n      const checkbox = document.createElement(\"input\");\r\n      checkbox.type = \"checkbox\";\r\n      checkbox.dataset.type = type;\r\n      checkbox.dataset.index = index;\r\n\r\n      loadTaskState(checkbox, type, index);\r\n\r\n      checkbox.addEventListener(\"change\", () =>\r\n        saveTaskState(checkbox, type, index)\r\n      );\r\n\r\n      listItem.appendChild(checkbox);\r\n      listItem.appendChild(document.createTextNode(task.name));\r\n\r\n      // Add dropdown functionality for tasks with sub-tasks (e.g. Daily Buys)\r\n      if (task.subTasks) {\r\n        const dropdownButton = document.createElement(\"button\");\r\n        dropdownButton.textContent = \"More Details\";\r\n        dropdownButton.classList.add(\"dropdown-btn\");\r\n        dropdownButton.addEventListener(\"click\", () =>\r\n          toggleDropdown(`task-${type}-${index}`)\r\n        );\r\n\r\n        const dropdownList = document.createElement(\"ul\");\r\n        dropdownList.classList.add(\"dropdown-list\");\r\n        dropdownList.id = `task-${type}-${index}`;\r\n        dropdownList.style.display = \"none\";\r\n\r\n        task.subTasks.forEach((subTask) => {\r\n          const subTaskItem = document.createElement(\"li\");\r\n          subTaskItem.textContent = subTask;\r\n          dropdownList.appendChild(subTaskItem);\r\n        });\r\n\r\n        listItem.appendChild(dropdownButton);\r\n        listItem.appendChild(dropdownList);\r\n      }\r\n\r\n      container.appendChild(listItem);\r\n    });\r\n  }\r\n\r\n  // Toggle visibility of dropdown\r\n  function toggleDropdown(dropdownId) {\r\n    const dropdownList = document.getElementById(dropdownId);\r\n    if (dropdownList) {\r\n      dropdownList.style.display =\r\n        dropdownList.style.display === \"none\" ? \"block\" : \"none\";\r\n    } else {\r\n      console.error(`Dropdown with ID ${dropdownId} not found.`);\r\n    }\r\n  }\r\n\r\n  // Load individual task state from local storage\r\n  function loadTaskState(checkbox, type, index) {\r\n    const savedState = JSON.parse(localStorage.getItem(`${type}-tasks`)) || {};\r\n    checkbox.checked = savedState[index] || false;\r\n  }\r\n\r\n  // Save individual task state to local storage\r\n  function saveTaskState(checkbox, type, index) {\r\n    const savedState = JSON.parse(localStorage.getItem(`${type}-tasks`)) || {};\r\n    savedState[index] = checkbox.checked;\r\n    localStorage.setItem(`${type}-tasks`, JSON.stringify(savedState));\r\n  }\r\n\r\n  // Reset daily tasks every day\r\n  function resetDailyTasks(dailyTasks) {\r\n    const lastDailyReset = localStorage.getItem(\"lastDailyReset\");\r\n    const today = new Date().toISOString().split(\"T\")[0];\r\n\r\n    if (lastDailyReset !== today) {\r\n      dailyTasks.forEach((task) => (task.checked = false));\r\n      saveAllTasks(dailyTasks, \"daily\");\r\n      localStorage.setItem(\"lastDailyReset\", today);\r\n    }\r\n    //console.log(lastDailyReset);\r\n  }\r\n\r\n  // Reset weekly tasks every Thursday\r\n  function resetWeeklyTasks(weeklyTasks) {\r\n    const lastWeeklyReset = localStorage.getItem(\"lastWeeklyReset\");\r\n    const today = new Date();\r\n    const dayOfWeek = today.getDay(); // 0 = Sunday, 4 = Thursday, 6 = Saturday\r\n\r\n    // If today is Thursday and last reset was not this Thursday, reset weekly tasks\r\n    if (\r\n      dayOfWeek === 4 &&\r\n      lastWeeklyReset !== today.toISOString().split(\"T\")[0]\r\n    ) {\r\n      weeklyTasks.forEach((task) => (task.checked = false));\r\n      saveAllTasks(weeklyTasks, \"weekly\");\r\n      localStorage.setItem(\r\n        \"lastWeeklyReset\",\r\n        today.toISOString().split(\"T\")[0]\r\n      );\r\n    }\r\n  }\r\n\r\n  // Save all tasks states to local storage (for resetting purposes)\r\n  function saveAllTasks(tasks, type) {\r\n    const taskStates = {};\r\n    tasks.forEach((task, index) => {\r\n      taskStates[index] = task.checked;\r\n    });\r\n    localStorage.setItem(`${type}-tasks`, JSON.stringify(taskStates));\r\n  }\r\n\r\n  function updateTime() {\r\n    const now = new Date();\r\n\r\n    // Format the time to show EU time (Europe/Brussels)\r\n    const timeFormat = new Intl.DateTimeFormat(\"en-US\", {\r\n      day: \"2-digit\",\r\n      weekday: \"long\",\r\n      hour: \"2-digit\",\r\n      minute: \"2-digit\",\r\n      second: \"2-digit\",\r\n      timeZone: \"Europe/Brussels\",\r\n      hour12: false,\r\n    });\r\n\r\n    const formattedTime = timeFormat.format(now);\r\n    const [day, weekday, time] = formattedTime.split(\" \");\r\n    const formattedDate = `${day} ${weekday}`;\r\n    currentTimeElement.textContent = `${formattedDate} ${time}`;\r\n  }\r\n\r\n  // Update time every second\r\n  setInterval(updateTime, 1000);\r\n  updateTime(); // Initial call to display time immediately\r\n});\r\n\n\n//# sourceURL=webpack:///./script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.js"]();
/******/ 	
/******/ })()
;